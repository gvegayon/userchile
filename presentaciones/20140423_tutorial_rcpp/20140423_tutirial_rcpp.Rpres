Tutorial de `Rcpp`
========================================================
author: George Vega
date: 23 Abr 2014
transition:fade
navigation:section

Grupo de Usuarios de R en Chile

```{r setup , include=FALSE , results='hold'}
library(Rcpp)
```

Agenda
================

- Por qué utilizar `C++` en R?
- `Rcpp` al rescate
- Ejemplos

Requerimientos
================
type:section

Para poder utilizar `Rcpp` es necesario contar con lo siguiente:

* `R` (>= 3.0.0)
* `gcc` (Incluido en [Rtools](http://cran.r-project.org/bin/windows/Rtools/))

Adicionalmente se sugiere

* Rstudio [http://www.rstudio.com](http://www.rstudio.com)
* El paquete `inline` [(CRAN)](http://cran.r-project.org/web/packages/inline)
* El paquete `rbenchmark` [(CRAN)](http://cran.r-project.org/web/packages/rbenchmark)

Ejemplo de Dirk Eddelbuettel
=====================

Considere la siguiente función

$$
f(n) = \begin{cases}
n & \text{si $n<2$} \\
f(n-1) + f(n - 2) & \text{si $n\geq2$}
\end{cases}
$$

=====================
Su implementación en `R` sería

```{r fibo_r, cache=TRUE, results='hold'}
f <- function(n) {
  if (n<2) return(n)
  
  return(f(n-1) + f(n-2))
}

sapply(0:9, f)
```
=====================
Y su equivalente en `Rcpp`
```{r fibo_rcpp, cache=TRUE, results='hold'}
library(Rcpp)
cppFunction('
int g(int n) {
  if (n < 2) return(n);
  return(g(n-1) + g(n-2));
}'
)

sapply(0:9, g)
```

======================
Y por qué la molestia?

Misma función... diferente desempeño

```{r fibo_bench, dependson=c(-1,-2), cache=TRUE}
library(rbenchmark)
benchmark(f(20), g(20))[,1:4]
```

Rcpp vs R API
======================
Lo que en `Rcpp` implica acceder a una función del paquete
`stats`:

```cpp
Environment stats("package:stats");
Function rnorm = stats["rnorm"];
return rnorm(10, Named("sd", 100.0));
```

Rcpp vs R API
======================

en la API de R equivale a un desastre!

```cpp
SEXP stats = PROTECT(
  R_FindNamespace(
    mkString("stats")));
SEXP rnorm = PROTECT(
  findVarInFrame(stats,
    install("rnorm")));
SEXP call = PROTECT(
  LCONS( rnorm,
    CONS(ScalarInteger(10),
      CONS(ScalarReal(100.0),
        R_NilValue))));
SET_TAG(CDDR(call),install("sd"));
SEXP res = PROTECT(eval(call,
  R_GlobalEnv));
UNPROTECT(4);
return res;
```

Maneras de utilizar `Rcpp`
=====================
incremental: true

* `cppFunction` Define funciones de Rcpp de manera dinámica.
* `sourceCpp` Ejecuta archivos `.cpp`, evalua e importa funciones (además permite incorporar bloques de `R`).
* `evalCpp` Evalua expresiones escritas en `C++`

Ejemplos evalCpp: 
=================

Obteniendo constantes

``` {r evalcpp1, cache=TRUE}
evalCpp( "PI" )
evalCpp( "std::numeric_limits<double>::max()" )
```

Ejemplos con `sourceCpp`
================

Utilizando la etiqueta `// [[Rcpp::export]]`, `sourceCpp` importa funciones escritas
en `C++` a `R` de manera dinámica. Más aún, permite incluir bloques de código 
de `R`.

```cpp
#include <Rcpp.h>

using namespace Rcpp;

// [[Rcpp::export]]
int g(int n) {
  if (n < 2) return(n);
  return(g(n-1) + g(n-2));
}

/*** R
g(10)
***/
```

Tipos de Objetos en `Rcpp`
=========================
type:section

En lo que sigue, revisaremos las clases de objetos en `Rcpp` y como 
manipularlos.

* `NumericVector`: Vectores numéricos. Se accede con `[i]`.
* `NumericMatrix`: Matrices numéricas. Se accede con `(i,j)`.
* `List`: Listas. Se accede con `["objeto"]`.
* `CharacterVector`: Idem Numéricos.
* `CharacterMatrix`: Idem Numéricos.

Ejemplo con NumericVector (R 1)
===================

``` {r rlogabs, cache=TRUE}
x <- -5:5
x
log(abs(x))
```

Ejemplo con NumericVector (R 2)
===================

``` {r rlogabsloop, cache=TRUE, dependson=c(-1)}
rlogabs <- function(x) {
  for (i in 1:length(x)) {
    x[i] <- log(abs(x[i]))
  }
  return(x)
}
rlogabs(x)
```

Ejemplo con NumericVector (Rcpp 1)
===================

``` {r cpplogabs, cache=TRUE, dependson=c(-1)}
cppFunction("
NumericVector logabs(NumericVector x) {
  // Inicializando
  NumericVector out(x.size());

  for(int i=0;i<x.size();i++)
    out[i] = log(fabs(x[i]));

  return out;
}")

logabs(x)
```

Ejemplo con NumericVector (Rcpp 2)
===================

Utilizando [_sugar_](http://adv-r.had.co.nz/Rcpp.html#rcpp-sugar) podemos escribirlo de una forma más sencilla!

``` {r cpplogabssuggar, cache=TRUE, dependson=c(-1)}
cppFunction("
NumericVector logabs(NumericVector x) {
  return log(abs(x));
}")

logabs(x)
```

Algunas de las funciones incorporadas son `abs(x)`, `exp(x)`, `floor(x)`, `ceil(x)`, `pow(x, z)`. (más en breve)

Ejemplo con NumericMatrix (R)
===================

``` {r rextractdiag, cache=TRUE}
mimat <- matrix(1:9, nrow=3)
mimat

diag(mimat)
```

Ejemplo con NumericMatrix (Rcpp)
===================

``` {r cppextractdiag, cache=TRUE}
cppFunction("
NumericVector cppdiag(NumericMatrix x) {
  NumericVector out(x.nrow());
  for(int i=0;i<x.nrow();i++)
    out[i] = x(i,i);
  return out;
}")

cppdiag(mimat)
```

Referencias
======================

* **Eddelbuettel, Dirk & Francois, Romain**, 2011, *Rcpp: Seamless R and C++ Integration*, Journal of Statistical Software, http://www.jstatsoft.org/v40/i08
* **Wickham, Hadley**, 2014, *Advanced R programming*,  http://adv-r.had.co.nz/
* **Eddelbuettel, Dirk**, 2013, *Rcpp by Examples*, Workshop preceding R/Finance 2013, http://dirk.eddelbuettel.com/papers/rcpp_rfinance_may2013.pdf.
* **Allaire, JJ**, 2013, *Rcpp Attributes*, Bay Area R User Group, http://rpubs.com/jjallaire/rcpp-attributes-bayarea-useR
